import * as Operations from './operation-transforms/operation-transforms';
import Doc = Mocha.reporters.Doc;
import {PaperSize} from '@/config';
import {OperationTransform} from './operation-transforms/operation-transforms';

// Because of how the diffing engine works, there are restrictions on the data structure for the document state.
// Rules are:
// 1. Structure is to remain static, except naturally Arrays.
// 2. Objects in arrays must be the same type.
// 3. Objects with uids can be placed as direct array elements to take advantage of the update, add, and delete
//    operations.
// 4. 'uid' is a special field. Use it only as a uuid and for atomic objects where different operations on it
//    should be combined.

export interface Coord {
    x: number;
    y: number;
}

export interface Dimensions {
    w: number;
    h: number;
}

export interface Rectangle {
    x: number;
    y: number;
    w: number;
    h: number;
}

export interface WithID {
    uid: string;
}

export interface Selectable extends WithID {
}

export interface Background extends Selectable {
    center: Coord;
    scaleName: string;
    scaleFactor: number;
    uri: string;
    crop: Rectangle;
    paperSize: PaperSize;
    rotation: number;

    // For scaling:
    pointA: Coord | null;
    pointB: Coord | null;

    // For replacing pdfs that need adjustments later:
    offset: Coord;

    // Backgrounds are part of PDFs and so may have many pages.
    page: number;
    totalPages: number;
}

/**
 * A drawing is a snapshot of a drawing - its shapes, pipes, fixtures, entities, title, etc, as is.
 */
export interface DrawingState {
    title: string;
    backgrounds: Background[];
}

/**
 * A document is a drawing + all of its history and meta attributes.
 */
export interface DocumentState {
    // This is the drawing that we last received or last sent to the server.
    committedDrawing: DrawingState;
    // This is the current drawing that is connected in real time to vue components.
    // Operations are generated by diffing this view with the drawing state.
    drawing: DrawingState;

    optimisticHistory: Operations.OperationTransform[];
    // A list of operations that have been performed on the committedDrawing.
    // This implies that changes in the drawing state are not reflected in operations.
    // This also implies that changes are updated from the server.
    history: Operations.OperationTransform[];
    nextId: number;
}

export const initialValue: DocumentState = {
    committedDrawing: {
        title: 'Untitled',
        backgrounds: [],
    },
    drawing: {
        title: 'Untitled',
        backgrounds: [],
    },
    optimisticHistory: [],
    history: [],
    nextId: 1,
};
