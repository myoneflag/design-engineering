import * as Operations from './operation-transforms/operation-transforms';
import {PIPE_SIZING_METHODS, PSD_METHODS, RING_MAIN_CALCULATION_METHODS} from '@/config';
import * as _ from 'lodash';
import {EntityType} from '@/store/document/entities/types';
import {BackgroundEntity} from '@/store/document/entities/background-entity';
import {ViewPort} from '@/htmlcanvas/viewport';
import {DrawingMode} from '@/htmlcanvas/types';
import {DemandType} from '@/calculations/types';

// Because of how the diffing engine works, there are restrictions on the data structure for the document state.
// Rules are:
// 1. Structure is to remain static, except naturally Arrays.
// 2. Objects in arrays must be the same type.
// 3. Objects with uids can be placed as direct array elements to take advantage of the update, add, and delete
//    operations.
// 4. 'uid' is a special field. Use it only as a uuid and for atomic objects where different operations on it
//    should be combined.

export interface Coord {
    x: number;
    y: number;
}

export interface Dimensions {
    w: number;
    h: number;
}

export interface Rectangle {
    x: number;
    y: number;
    w: number;
    h: number;
}

export interface WithID {
    uid: string;
}

export interface DrawableEntity extends WithID {
    parentUid: string | null;
    type: EntityType;
}

export interface CenteredEntity extends DrawableEntity {
    center: Coord;
}

export interface ConnectableEntity extends CenteredEntity {
    connections: string[];
}

/**
 * A drawing is a snapshot of a drawing - its shapes, pipes, fixtures, entities, title, etc, as is.
 */
export interface DrawingState {
    generalInfo: GeneralInfo;
    backgrounds: BackgroundEntity[];
    flowSystems: FlowSystemParameters[];
    calculationParams: CalculationParameters;
    entities: DrawableEntity[];
}

export interface CalculationUiSettings {
    demandType: DemandType | null;
}

export interface UIState {
    viewPort: ViewPort | null;
    loaded: boolean;
    drawingMode: DrawingMode;
    demandType: DemandType;

    lastCalculationId: number;
    lastCalculationUiSettings: CalculationUiSettings;
    isCalculating: boolean;
}

/**
 * A document is a drawing + all of its history and meta attributes.
 */
export interface DocumentState {
    // This is the drawing that we last received or last sent to the server.
    committedDrawing: DrawingState;
    // This is the current drawing that is connected in real time to vue components.
    // Operations are generated by diffing this view with the drawing state.
    drawing: DrawingState;

    optimisticHistory: Operations.OperationTransform[];

    stagedCommits: Operations.OperationTransform[];

    // A list of operations that have been performed on the committedDrawing.
    // This implies that changes in the drawing state are not reflected in operations.
    // This also implies that changes are updated from the server.
    history: Operations.OperationTransform[];
    nextId: number;

    uiState: UIState;
}

export interface GeneralInfo {
    title: string;
    projectNumber: string;
    projectStage: string;
    designer: string;
    reviewed: string;
    approved: string;
    revision: number;
    client: string;
    description: string;
}

export interface Color {
    hex: string;
}

export interface FlowSystemParameters extends WithID {
    name: string;
    velocity: number;
    temperature: number;
    spareCapacity: number;
    material: string;
    color: Color;
}

export interface CalculationParameters {
    psdMethod: string;
    ringMainCalculationMethod: string;
    pipeSizingMethod: string;
}

export const initialDrawing: DrawingState = {
    generalInfo: {
        title: 'Untitled',
        projectNumber: '',
        projectStage: '',
        designer: '',
        reviewed: '',
        approved: '',
        revision: 1,
        client: '',
        description: '',
    },
    flowSystems: [
        // TODO: these values should get got from the database.
        {
            name: 'Cold Water',
            velocity: 10,
            temperature: 20,
            spareCapacity: 10,
            material : 'copperTypeB',
            color: {hex: '#009CE0'},
            uid: 'cold-water',
        },
        {
            name: 'Hot Water',
            velocity: 10,
            temperature: 60,
            spareCapacity: 10,
            material : 'copperTypeB',
            color: {hex: '#F44E3B'},
            uid: 'hot-water',
        },
        {
            name: 'Warm Water',
            velocity: 10,
            temperature: 50,
            spareCapacity: 10,
            material : 'copperTypeB',
            color: {hex: '#F49000'},
            uid: 'warm-water',
        },
    ],
    calculationParams: {
        psdMethod: PSD_METHODS[0][0],
        ringMainCalculationMethod: RING_MAIN_CALCULATION_METHODS[0][0],
        pipeSizingMethod: PIPE_SIZING_METHODS[0][0],
    },
    backgrounds: [],
    entities: [],
};

export const initialUIState: UIState = {
    demandType: DemandType.PSD,
    drawingMode: DrawingMode.FloorPlan,
    loaded: false,
    viewPort: null,

    lastCalculationId: 0,
    lastCalculationUiSettings: {
        demandType: null,
    },
    isCalculating: false,
};

export const initialValue: DocumentState = {
    committedDrawing: _.cloneDeep(initialDrawing),
    drawing: _.cloneDeep(initialDrawing),
    optimisticHistory: [],
    stagedCommits: [],
    history: [],
    nextId: 1,
    uiState: _.cloneDeep(initialUIState),
};
