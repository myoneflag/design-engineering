stages:
    - build
    - git
    - deploy
    - test

variables:
  CRAWLER_ENV:
    value: stage
    description: Env to crawl
  CRAWLER_USERNAME:
    value: h2xbot
    description: Crawl username
  CRAWLER_PASSWORD:
    value: changeme  
    description: Crawl password

build:cloudformation:
    stage: build
    variables:
      AWS_PROFILE: h2x-gitlab-runner-test-profile
      env: build
    only:
        refs:
          - merge_requests
        changes:
          - cloudformation/**/*
          - config/**/*
    cache: []
    script:
        - cd cloudformation
        - npm install
        - npm run validate

build:docker:
    stage: build
    only:
        refs:
          - merge_requests
        changes:
          - docker/**/*          
    cache: []
    script:
        - cd docker
        - npm install
        - sudo npm run login:dockerhub
        - sudo npm run build:all --target=prod

build:frontend:
    stage: build
    only:
        refs:
          - merge_requests
        changes:
          - node/**/*
    cache:
        paths:
            - node/node_modules/        
            - node/frontend/node_modules/
    script:
        - cd node
        - npm install
        - cd frontend
        - npm install
        - npm run build
        
build:backend:
    stage: build
    only:
        refs:
          - merge_requests
        changes:
          - node/**/*
    cache:
        paths:
            - node/node_modules/        
            - node/backend/node_modules/
    script:
        - cd node
        - npm install
        - cd backend
        - npm install
        - npm run build

merge-to-app-test:
    stage: git
    only:
        - merge_requests
    when: manual
    allow_failure: true
    cache: []
    script:
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - git config --global user.name "$GITLAB_USER_NAME"
        - git remote set-url origin git@gitlab.com:info892/H2X.git
        - git fetch origin
        - git reset --hard app-test || echo skipping reset
        - git checkout -B app-test origin/app-test
        - git merge origin/$CI_COMMIT_REF_NAME || ( curl -d "token=$SLACK_BUILD_BOT_TOKEN" -d "text=> Merge conflict when merging branch $CI_COMMIT_REF_NAME to app-test by $GITLAB_USER_EMAIL. More details at https://gitlab.com/info892/H2X/-/jobs/$CI_JOB_ID" -d "channel=$SLACK_BUILD_CHANNEL_ID" -X POST https://slack.com/api/chat.postMessage && exit 1 )
        - git push origin app-test

update-from-master:
    stage: git
    only:
        - merge_requests
    when: manual
    allow_failure: true
    cache: []
    script:
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - git config --global user.name "$GITLAB_USER_NAME"
        - git remote set-url origin git@gitlab.com:info892/H2X.git
        - git fetch origin
        - git reset --hard $CI_COMMIT_REF_NAME || echo reset
        - git checkout -B $CI_COMMIT_REF_NAME origin/$CI_COMMIT_REF_NAME
        - git merge origin/master || ( curl -d "token=$SLACK_BUILD_BOT_TOKEN" -d "text=> Merge conflict when merging branch master to $CI_COMMIT_REF_NAME by $GITLAB_USER_EMAIL. More details at https://gitlab.com/info892/H2X/-/jobs/$CI_JOB_ID" -d "channel=$SLACK_BUILD_CHANNEL_ID" -X POST https://slack.com/api/chat.postMessage && exit 1 )
        - git push origin $CI_COMMIT_REF_NAME

deploy-app:
  stage: deploy
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: https://$CI_COMMIT_REF_SLUG.h2xtesting.com
    deployment_tier: development    
    on_stop: stop-deploy-app
  resource_group: $CI_COMMIT_REF_SLUG
  variables:
    AWS_PROFILE: h2x-gitlab-runner-test-profile
  cache: []    
  script:
    - export env=${CI_COMMIT_BRANCH/app-/}
    - echo "Deploy env $env for $CI_COMMIT_BRANCH"
    - sudo -E ./cloudformation/deploy.sh
  after_script:
    - sudo -E ./cloudformation/clean.sh
  only:
    - /^app-.*$/

stop-deploy-app:
  stage: deploy
  when: manual
  variables:
    GIT_STRATEGY: none
    AWS_PROFILE: h2x-gitlab-runner-test-profile
  cache: []    
  script:
    - export env=${CI_COMMIT_BRANCH/app-/}
    - echo "Delete env $env for $CI_COMMIT_BRANCH"
    - sudo -E ./cloudformation/delete.sh
  after_script:
    - sudo -E ./cloudformation/clean.sh
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop
  only:
    - /^app-((?!test|stage|prod).*)$/

deploy_stage:
  stage: deploy
  variables:  
    AWS_PROFILE: h2x-gitlab-runner-test-profile
    env: stage
  cache: []    
  script:
    - echo "Deploy $CI_COMMIT_BRANCH branch to $env"
    - sudo -E ./cloudformation/deploy.sh
  after_script:
    - sudo -E ./cloudformation/clean.sh
  environment:
    name: stage
    url: https://app-stage.h2xtesting.com
    deployment_tier: staging
  resource_group: stage    
  only:
    - tags
    - /^release-.*$/

deploy_prod:
  stage: deploy
  variables:
    AWS_PROFILE: h2x-gitlab-runner-prod-profile
    env: prod
  cache: []    
  script:    
    - echo "Deploy $CI_COMMIT_TAG branch to PRODUCTION. Initiated manually."
    - sudo -E ./cloudformation/deploy.sh
  after_script:
    - sudo -E ./cloudformation/clean.sh
  environment:
    name: prod
    url: https://app.h2xengineering.com
    deployment_tier: production
  resource_group: prod
  only:
    - tags
  when: manual
  allow_failure: false

crawl_website:
  stage: test
  cache: []
  script:
    - export ENV=${CRAWLER_ENV}
    - export USERNAME=${CRAWLER_USERNAME}
    - export PASSWORD=${CRAWLER_PASSWORD}
    - cd scripts/crawler
    - npm install
    - ./crawl.sh
  artifacts:
    paths:
      - "scripts/crawler/temp/*"
    expire_in: 1 week    
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true
